//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Walmart.Curiosity.Data.Edmx
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CuriosityQAEntities : DbContext
    {
        public CuriosityQAEntities()
            : base("name=CuriosityQAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<uspVendorPersonalInfo_Result> uspVendorPersonalInfo(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspVendorPersonalInfo_Result>("uspVendorPersonalInfo", vendorIdParameter);
        }
    
        public virtual ObjectResult<uspBrokerPersonalInfo_Result> uspBrokerPersonalInfo(Nullable<int> brokerId, string countryId)
        {
            var brokerIdParameter = brokerId.HasValue ?
                new ObjectParameter("BrokerId", brokerId) :
                new ObjectParameter("BrokerId", typeof(int));
    
            var countryIdParameter = countryId != null ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBrokerPersonalInfo_Result>("uspBrokerPersonalInfo", brokerIdParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<uspGetLocationByZipCode_Result> uspGetLocationByZipCode(string zipCode, string countryId)
        {
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var countryIdParameter = countryId != null ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetLocationByZipCode_Result>("uspGetLocationByZipCode", zipCodeParameter, countryIdParameter);
        }
    
        public virtual ObjectResult<uspGetVendorPaymentType_Result> uspGetVendorPaymentType(Nullable<int> vendorId, Nullable<int> paymentTypeCatId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var paymentTypeCatIdParameter = paymentTypeCatId.HasValue ?
                new ObjectParameter("PaymentTypeCatId", paymentTypeCatId) :
                new ObjectParameter("PaymentTypeCatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetVendorPaymentType_Result>("uspGetVendorPaymentType", vendorIdParameter, paymentTypeCatIdParameter);
        }
    }
}
